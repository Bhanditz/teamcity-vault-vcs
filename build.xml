<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="vault-custom" basedir="." default="all">

    <property file="build.properties"/>
    <import file="${basedir}/vault.xml"/>

    <property name="plugin.name" value="vault-vcs"/>

    <property name="vault.java.clc.url"
              value="http://download-us.sourcegear.com/Vault/5.0.1.18729/vaultJavaCLC_5_0_1_18729.zip"/>

    <import file="${basedir}/teamcity-common.xml"/>

    <property environment="env"/>
    <!--<property name="build.number" value="${env.BUILD_NUMBER}"/>-->

    <target name="all" depends="check.teamcitydistribution, prepare.vault.api, vault.all"/>

    <target name="prepare.vault.api" depends="prepare.path.variable.vaultapi, check.vault.api.present, get.vault.api"/>

    <target name="prepare.path.variable.vaultapi"
            depends="set.path.variable.vaultapi.if.under.teamcity, set.path.variable.vaultapi.if.not.under.teamcity"/>

    <target name="set.path.variable.vaultapi.if.under.teamcity"
            if="teamcity.build.checkoutDir"
            unless="path.variable.vaultapi">
        <property name="path.variable.vaultapi" value="${teamcity.build.checkoutDir}/vaultAPI"/>
    </target>

    <target name="set.path.variable.vaultapi.if.not.under.teamcity"
            unless="path.variable.vaultapi">
        <property name="path.variable.vaultapi" value="${basedir}/vaultAPI"/>
    </target>

    <target name="check.vault.api.present" if="path.variable.vaultapi">
        <condition property="vault.api.not.present">
          <not>
            <and>
              <available file="${path.variable.vaultapi}/VaultClientIntegrationLib.jar"/>
            </and>
          </not>               
        </condition>
    </target>

    <target name="get.vault.api" if="vault.api.not.present">
        <property name="vault.java.clc.zip" value="${env.TEMP}/vault_java_clc.zip"/>
        <property name="vault.java.clc" value="${env.TEMP}/vault_java_clc"/>
        <delete file="${vault.java.clc.zip}"/>
        <delete dir="${vault.java.clc}"/>
        <get src="${vault.java.clc.url}"
             dest="${vault.java.clc.zip}"/>
        <unzip src="${vault.java.clc.zip}" dest="${env.TEMP}/vault_java_clc"/>
        <copy todir="${path.variable.vaultapi}" overwrite="true">
            <fileset dir="${vault.java.clc}/vaultJavaCLC/lib">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <delete file="${vault.java.clc.zip}"/>
        <delete dir="${vault.java.clc}"/>
    </target>
    
    <target name="dist" depends="all, define.version">
        <package.teamcity.plugin name="${plugin.name}"
                                 server.output="${vault-server.output.dir}"
                                 out="dist"
                                 plugin.descriptor.file="${basedir}/teamcity-plugin.xml"
                                 plugin.version="${plugin.version}"/>
    </target>


    <target name="define.version" depends="define.version.if.under.teamcity">
        <tstamp>
            <format property="current.time" pattern="yyyyMMddHHmm"/>
        </tstamp>
        <property name="plugin.version" value="SNAPSHOT-${current.time}"/>
    </target>

    <target name="define.version.if.under.teamcity" if="build.number">
        <property name="plugin.version" value="${build.number}"/>
    </target>

    <target name="deploy" depends="dist" description="deploy plugin to TeamCity">
        <deploy.teamcity.plugin name="${plugin.name}"/>
    </target>

    <taskdef resource="testngtasks">
        <classpath>
            <path refid="library.testng.classpath"/>
        </classpath>
    </taskdef>

    <target name="test" depends="all, test-nofail, check_failures"/>

    <target name="test-nofail">
        <delete dir="test-reports" quiet="true"/>
        <mkdir dir="test-reports"/>
        <testng failureproperty="failure_found">
            <classpath>
                <path refid="vault-tests.runtime.module.classpath"/>
            </classpath>
            <classfileset dir="${vault-tests.output.dir}">
                <include name="**/*Test.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="check_failures" if="failure_found">
        <fail message="Failures found"/>
    </target>
</project>