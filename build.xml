<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="vault-custom" basedir="." default="all">

    <property file="build.properties"/>
    <import file="${basedir}/vault.xml"/>

    <property name="plugin.name" value="vault-vcs"/>

    <import file="${basedir}/teamcity-common.xml"/>

    <property environment="env"/>

    <target name="all" depends="check.teamcitydistribution, prepare.vault.api, vault.all"/>

    <target name="prepare.vault.api" depends="check.vault.api.variable, check.vault.api.present, get.vault.api.if.necessary"/>

    <target name="check.vault.api.variable" description="checks whether manually downloaded Vault Java API is ready to be used by IDEA-generated build">
      <check.property name="path.variable.vaultapi"
                      fail-message="Please define 'path.variable.vaultapi' property in build.properties file. The property should point to Vault Java API jars."
          />
    </target>

    <target name="check.vault.api.present" if="path.variable.vaultapi">
        <condition property="vault.api.not.present">
          <not>
            <and>
              <available file="${path.variable.vaultapi}/VaultClientIntegrationLib.jar"/>
            </and>
          </not>               
        </condition>
    </target>

    <target name="get.vault.api.if.necessary" if="vault.api.not.present">
      <echo message="Vault API is not found at ${path.variable.vaultapi}, will download."/>
      <antcall target="get.vault.api"/>
    </target>

    <target name="check.vault.java.clc.url" description="checks whether vault.java.clc.url property specified">
      <check.property name="vault.java.clc.url"
                      fail-message="Please define 'vault.java.clc.url' property (e.g. in build.properties file). The property should contain url for downloading suitable version of Vault Java CLC zip archive (e.g from http://www.sourcegear.com/vault/downloads.html)."
          />
      <echo message="Using ${vault.java.clc.url} to download Vault Java CLC" />
    </target>

    <target name="get.vault.api" depends="check.vault.java.clc.url">
        <echo message="Downloading Vault API from SourceGear site, this can take a while..."/>

        <property name="vault.java.clc" value="${basedir}/vault_java_clc"/>
        <delete dir="${vault.java.clc}"/>
        <mkdir dir="${vault.java.clc}"/>

        <get dest="${vault.java.clc}" verbose="true">
            <url url="${vault.java.clc.url}"/>
        </get>

        <unzip dest="${vault.java.clc}">
            <fileset dir="${vault.java.clc}">
                <include name="*.zip"/>
            </fileset>
        </unzip>

        <copy todir="${path.variable.vaultapi}" overwrite="true" flatten="true">
            <fileset dir="${vault.java.clc}">
                <include name="*/lib/*.jar"/>
            </fileset>
        </copy>

        <delete dir="${vault.java.clc}"/>
        <echo message="Vault API prepared in ${path.variable.vaultapi}"/>
    </target>

    <target name="dist" depends="package"/>

    <target name="package" depends="define.version, artifact.changes-patch-builder">
        <delete dir="dist" quiet="true"/>
        <package.teamcity.plugin name="${plugin.name}"
                                 server.output="${vault-server.output.dir}"
                                 out="dist"
                                 plugin.descriptor.file="${basedir}/teamcity-plugin.xml"
                                 plugin.version="${plugin.version}"
                                 server.lib.dir="${artifact.output.changes-patch-builder}"
                                 server.lib.includes="*.jar"/>
        </target>


    <target name="define.version" depends="define.version.if.under.teamcity">
        <tstamp>
            <format property="current.time" pattern="yyyyMMddHHmm"/>
        </tstamp>
        <property name="plugin.version" value="SNAPSHOT-${current.time}"/>
    </target>

    <target name="define.version.if.under.teamcity" if="build.number">
        <property name="plugin.version" value="${build.number}"/>
    </target>

    <target name="deploy" depends="dist" description="deploy plugin to TeamCity">
        <deploy.teamcity.plugin name="${plugin.name}"/>
    </target>

    <taskdef resource="testngtasks">
        <classpath>
            <path refid="library.testng.classpath"/>
        </classpath>
    </taskdef>

    <target name="test" depends="test-nofail, check_failures"/>
    <target name="changes-patch-builder-test" depends="all, test-changes-patch-builder-nofail, test-changes-patch-builder-check_failures"/>

    <target name="test-nofail">
        <check.property name="vault.test.server"
                        fail-message="Vault test server URL is not specified in build.properties"/>
        <check.property name="vault.test.login"
                        fail-message="Vault test login is not specified in build.properties"/>
        <check.property name="vault.test.server"
                        fail-message="Vault test user password is not specified in build.properties"/>
        <testng failureproperty="failure_found" dumpcommand="true" haltonfailure="false" verbose="2">
            <jvmarg value="-Dvault.test.server=${vault.test.server}" />
            <jvmarg value="-Dvault.test.login=${vault.test.login}" />
            <jvmarg value="-Dvault.test.password=${vault.test.password}" />
            <classpath>
                <path refid="vault-tests.runtime.module.classpath"/>
            </classpath>
            <classfileset dir="${vault-tests.output.dir}">
                <include name="**/*Test.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="check_failures" if="failure_found">
        <fail message="Failures found"/>
    </target>

    <target name="test-changes-patch-builder-nofail">
        <delete dir="test-reports" quiet="true"/>
        <mkdir dir="test-reports"/>        
        <junit printsummary="on"
               fork="true"
               haltonfailure="false"
               haltonerror="false"
               failureproperty="test-changes-patch-builder-failure_found"
               showoutput="true">
            <classpath>
                <path refid="changes-patch-builder-test.runtime.module.classpath"/>
            </classpath>
            <!--<test name="jetbrains.buildServer.vcs.patches.AllTests" todir="vika"/>-->
            <formatter type="xml"/>
            <batchtest todir="test-reports">
                <fileset  dir="${changes-patch-builder-test.testoutput.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-changes-patch-builder-check_failures" if="test-changes-patch-builder-failure_found">
        <fail message="Failures found in changes patch builder test"/>
    </target>
</project>